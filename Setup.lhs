#!/usr/bin/env runhaskell
> import Distribution.Simple
> import Distribution.Simple.Setup
> import Distribution.PackageDescription
> import Distribution.Text
> import Data.List
> import Data.Maybe
> import System.Directory
> import System.FilePath

> main = defaultMainWithHooks simpleUserHooks { preBuild = autogenLists }

Before building the package, we generate Distribution.ArchLinux.CabalTranslationData
from data/library-providers and data/ghc-provides

> autogenLists :: Args -> BuildFlags -> IO HookedBuildInfo
> autogenLists _ _ = do
>   f1 <- readFile ("data" </> "ghc-provides")
>   f2 <- readFile ("data" </> "library-providers")
>   let modulefile = unlines [ moduleHeader, corePackages f1, translationTable f2 ]
>   _ <- createDirectoryIfMissing True autogenFilePath
>   writeFile (autogenFilePath </> "CabalTranslationData.hs") modulefile
>   return (Just emptyBuildInfo { hsSourceDirs = [autogenFilePath] }, [] )
> autogenFilePath = "dist" </> "build" </> "autogen"

This is the header of the autogenerated module.

> moduleHeader = unlines [
>    "-- |"
>  , "-- Module    : Distribution.ArchLinux.CabalTranslationData"
>  , "--"
>  , "module CabalTranslationData where"
>  , "import Data.Map as M"
>  , "import Distribution.Package"
>  , "import Distribution.Version"
>  , "translationTable :: M.Map String String"
>  , "corePackages :: [Dependency]"
>  ]

Converts from "module>=4.3" strings to Dependency structures.

> depstr2hs :: String -> Maybe Dependency
> depstr2hs s | s == "" || head s == '#' = Nothing
>             | otherwise = simpleParse s

We build up source code to defines the "corePackages" list.

> corePackages srcfile1 = 
>    "corePackages = [ "
>  ++ intercalate "\n  ," (map show $ mapMaybe depstr2hs $ lines srcfile1)
>  ++ " ]"

Now we translate the "library-providers" file. Any line beginning with "# "
or lines with something else than two words are discarded. Lines should have
the form "libraryname packagename".

> trstr2hs :: String -> Maybe String
> trstr2hs s = case words s of
>   "#":_ -> Nothing
>   a:b:_ -> Just ( "(\"" ++ a ++ "\",\"" ++ b ++ "\")" )
>   otherwise -> Nothing

> translationTable srcfile2 =
>     "translationTable = M.fromList [ "
>  ++ intercalate "\n  ," (mapMaybe trstr2hs $ lines srcfile2)
>  ++ " ]"
